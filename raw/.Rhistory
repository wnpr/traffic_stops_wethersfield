ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
p_load(ggplot2, dplyr, janitor)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("janitor")
install.packages("pacman")
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
p_load(ggplot2, dplyr, janitor)
library(dplyr)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
View(df_with_total)
districts <- c("All", sort(unique(district)))
library(ggplot2)
library(dplyr)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("fst")
321+266
devtools::install_version("rmarkdown", version = "1.8", repos = "http://cran.us.r-project.org")
install.packages("robotstxt")
library(robotstxt)
vignette(package = "robotstext")
vignette(package = "robotstxt")
vignette("using_robotstxt")
paths_allowed("https://wethersfieldct.gov/")
my_element <- "select"
library(rvest)
my_html <- "https://wethersfieldct.gov/government/agendas-and-minutes"
my_nodes <- html_nodes(my_html, my_element)
my_element <- "div select"
my_nodes <- html_nodes(my_html, my_element)
url <- "https://wethersfieldct.gov/government/agendas-and-minutes"
read_html(url)
html_nodes(url, '#FB2_D select')
setwd("C:/Users/pskahill/Desktop/wethersfield_traffic_data/data/raw")
load("traffic_race_location.rdata")
total <- total %>%
mutate(Race =
ifelse(total$SubjectEthnicityCode == "N", total$SubjectRaceCode, total$SubjectEthnicityCode)
)
library(tidyr)
library(dplyr)
total <- total %>%
mutate(Race =
ifelse(total$SubjectEthnicityCode == "N", total$SubjectRaceCode, total$SubjectEthnicityCode)
)
department_stops_by_race <- total %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n))
department_stops_by_race <- total %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n))%>%
mutate(percent_race_of_stops = (n/sum(department_stops_by_race$n))*100)
salvatore_575 <- total %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n))
#Salvatore
salvatore_575 <- total %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n)) %>%
mutate(percent_race_of_stops = (n/sum(salvatore_575$n))*100)
eulizier_250044 <- total %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n))
#Eulizier
eulizier_250044 <- total %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(Race) %>%
count(Race) %>%
arrange(desc(n))%>%
mutate(percent_race_of_stops = (n/sum(eulizier_250044$n))*100)
library(stringr)
total_lower_case <- total %>%
mutate(location =
str_to_lower(total$InterventionLocationDescriptionText)
)
total_lower_case <- total_lower_case %>%
mutate(silas_deane_stop =
if_else(str_detect(location, "silas"), "Y", "N")
)
View(total_lower_case)
department_silas <- total_lower_case %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n))
#Department
department_silas <- total_lower_case %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n)) %>%
mutate(percent_of_all_stops = (n/sum(department_silas$n))*100)
View(department_silas)
salvatore_silas <- total_lower_case %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n))
#Salvatore
salvatore_silas <- total_lower_case %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n)) %>%
mutate(percent_of_all_stops = (n/sum(salvatore_silas$n))*100)
eulizier_silas <- total_lower_case %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n))
#Eulizier
eulizier_silas <- total_lower_case %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n)) %>%
mutate(percent_of_all_stops = (n/sum(eulizier_silas$n))*100)
department_silas <- total_lower_case %>%
filter(str_detect(location, "silas")) %>%
group_by(location) %>%
count(location) %>%
arrange(desc(n))
#Where Are Cars Being Stopped On Silas Deane Highway?
#filter for 'silas' on original total df
department_silas <- total_lower_case %>%
filter(str_detect(location, "silas")) %>%
group_by(location) %>%
count(location) %>%
arrange(desc(n)) %>%
mutate(percent_race_of_silas_stops = (n/sum(department_silas$n))*100)
department_silas_location <- total_lower_case %>%
filter(str_detect(location, "silas")) %>%
group_by(location) %>%
count(location) %>%
arrange(desc(n))
#Where Are Cars Being Stopped On Silas Deane Highway?
#filter for 'silas' on original total df
department_silas_location <- total_lower_case %>%
filter(str_detect(location, "silas")) %>%
group_by(location) %>%
count(location) %>%
arrange(desc(n)) %>%
mutate(percent_race_of_silas_stops = (n/sum(department_silas_location$n))*100)
department_silas <- total_lower_case %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n))
#Department
department_silas <- total_lower_case %>%
group_by(silas_deane_stop) %>%
count(silas_deane_stop) %>%
arrange(desc(n)) %>%
mutate(percent_of_all_stops = (n/sum(department_silas$n))*100)
View(department_silas_location)
View(department_stops_by_race)
View(eulizier_250044)
View(salvatore_575)
View(salvatore_silas)
View(eulizier_250044)
View(eulizier_silas)
View(salvatore_575)
View(department_silas_location)
View(department_silas)
View(eulizier_250044)
View(department_silas_location)
write.csv(department_silas_location, "department_silas_location.csv")
View(department_silas)
View(department_silas_location)
#import data
stops_2018 <- read.csv("wethersfield-r5.csv", header = T, stringsAsFactors = F)
officer_names <- read.csv("officer_names.csv", header = T, stringsAsFactors = F)
stops_2019 <- read.csv("2019WethersfieldJan-Mar.csv", header = T, stringsAsFactors = F)
#tidy data
#make $ReportingOfficerIdentificationID numeric
stops_2018 <- stops_2018 %>%
mutate(ReportingOfficerIdentificationID = as.numeric(ReportingOfficerIdentificationID))
stops_2019 <- stops_2019 %>%
mutate(ReportingOfficerIdentificationID = as.numeric(ReportingOfficerIdentificationID))
officer_names <- officer_names %>%
mutate(ReportingOfficerIdentificationID = as.numeric(ReportingOfficerIdentificationID))
master_2018 <- stops_2018 %>%
left_join(officer_names, by = "ReportingOfficerIdentificationID") %>%
select("ReportingOfficerIdentificationID", "Name", "ReasonForStop",
"InterventionDate", "Month")
master_2019 <- stops_2019 %>%
left_join(officer_names, by = "ReportingOfficerIdentificationID")%>%
select("ReportingOfficerIdentificationID", "Name", "ReasonForStop",
"InterventionDate", "Month")
#r bind two dataframes
total <- rbind(master_2018, master_2019)
save(total, file = "traffic_reason_data.rdata")
load("traffic_reason_data.rdata")
by_officer <- total %>% group_by(Name) %>%
filter(!is.na(Name)) %>%
count(Name) %>%
arrange(desc(n))
salvatore_575 <- total %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n))
#Salvatore
salvatore_575 <- total %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n)) %>%
mutate(percent_of_stops = (n/sum(salvatore_575$n))*100)
#Salvatore
salvatore_575 <- total %>%
filter(Name == "Ofc. Salvatore" | ReportingOfficerIdentificationID == "575") %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n)) %>%
mutate(percent_of_stops = (n/sum(salvatore_575$n))*100)
eulizier_250044 <- total %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n))
#Eulizier
eulizier_250044 <- total %>%
filter(Name == "Ofc. Eulizier" | ReportingOfficerIdentificationID == "250044") %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n))%>%
mutate(percent_of_stops = (n/sum(eulizier_250044$n))*100)
department_reason <- total %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n))
#Department
department_reason <- total %>%
group_by(ReasonForStop) %>%
count(ReasonForStop) %>%
arrange(desc(n))%>%
mutate(percent_of_stops = (n/sum(department_reason$n))*100)
View(by_officer)
View(by_officer)
View(department_reason)
View(eulizier_250044)
View(eulizier_250044)
View(salvatore_575)
View(eulizier_250044)
?sum()
sum(salvatore_575$n)
sum(eulizier_250044$n)
321+266
#import data
stops_2018 <- read.csv("wethersfield-r5.csv", header = T, stringsAsFactors = F)
stops_2019 <- read.csv("2019WethersfieldJan-Mar.csv", header = T, stringsAsFactors = F)
3150+901
