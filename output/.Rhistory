library(plotly)
library(tidyr)
library(dplyr)
library(ggplot2)
plot_ly(df, x= year, y=money)
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
# Define UI for application
ui <- dashboardPage(
dashboardHeader(title = "Shiny Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Menu Item 1", tabName = "menu_1"),
menuItem("Menu Item 2", tabName = "menu_2",
menuSubItem("Sub Menu Item 1", tabName = "sub_1"),
menuSubItem("Sub Menu Item 2", tabName = "sub_2")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "menu_1",
fluidRow(
h1("Homepage 1")
)
),
tabItem(tabName = "menu_2",
fluidRow(
h1("Homepage 2")
)
),
tabItem(tabName = "sub_1",
fluidRow(
h1("Sub Menu Page 1")
)
),
tabItem(tabName = "sub_2",
fluidRow(
h1("Sub Menu Page 2")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/pskahill/Desktop/Suspensions/money-data/scripts/outplacement_by_city')
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
View(df)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
p_load(ggplot2, dplyr, janitor)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("janitor")
install.packages("pacman")
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
p_load(ggplot2, dplyr, janitor)
library(dplyr)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
View(df_with_total)
districts <- c("All", sort(unique(district)))
library(ggplot2)
library(dplyr)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("fst")
321+266
devtools::install_version("rmarkdown", version = "1.8", repos = "http://cran.us.r-project.org")
install.packages("robotstxt")
library(robotstxt)
vignette(package = "robotstext")
vignette(package = "robotstxt")
vignette("using_robotstxt")
paths_allowed("https://wethersfieldct.gov/")
my_element <- "select"
library(rvest)
my_html <- "https://wethersfieldct.gov/government/agendas-and-minutes"
my_nodes <- html_nodes(my_html, my_element)
my_element <- "div select"
my_nodes <- html_nodes(my_html, my_element)
url <- "https://wethersfieldct.gov/government/agendas-and-minutes"
read_html(url)
html_nodes(url, '#FB2_D select')
setwd("C:/Users/pskahill/Desktop/wethersfield_traffic_data/data/traffic_stops_wethersfield/scripts")
setwd("C:/Users/pskahill/Desktop/wethersfield_traffic_data/data/traffic_stops_wethersfield/output")
load("traffic_reason_data.rdata")
load("traffic_reason.rdata")
write.csv(total, "total_reason.csv")
